input createItemInput {
  data: ItemInput
}

type createItemPayload {
  item: Item
}

input createOrderInput {
  data: OrderInput
}

type createOrderPayload {
  order: Order
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSectionInput {
  data: SectionInput
}

type createSectionPayload {
  section: Section
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteItemInput {
  where: InputID
}

type deleteItemPayload {
  item: Item
}

input deleteOrderInput {
  where: InputID
}

type deleteOrderPayload {
  order: Order
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSectionInput {
  where: InputID
}

type deleteSectionPayload {
  section: Section
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related: [ID]
}

input InputID {
  id: ID!
}

type Item {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  image: UploadFile
  section: Section
  price: Int
}

type ItemAggregator {
  count: Int
  sum: ItemAggregatorSum
  avg: ItemAggregatorAvg
  min: ItemAggregatorMin
  max: ItemAggregatorMax
}

type ItemAggregatorAvg {
  price: Float
}

type ItemAggregatorMax {
  price: Float
}

type ItemAggregatorMin {
  price: Float
}

type ItemAggregatorSum {
  price: Float
}

type ItemConnection {
  values: [Item]
  groupBy: ItemGroupBy
  aggregate: ItemAggregator
}

type ItemConnection_id {
  key: ID
  connection: ItemConnection
}

type ItemConnectionCreatedAt {
  key: DateTime
  connection: ItemConnection
}

type ItemConnectionDescription {
  key: String
  connection: ItemConnection
}

type ItemConnectionImage {
  key: ID
  connection: ItemConnection
}

type ItemConnectionName {
  key: String
  connection: ItemConnection
}

type ItemConnectionPrice {
  key: Int
  connection: ItemConnection
}

type ItemConnectionSection {
  key: ID
  connection: ItemConnection
}

type ItemConnectionUpdatedAt {
  key: DateTime
  connection: ItemConnection
}

type ItemGroupBy {
  _id: [ItemConnection_id]
  createdAt: [ItemConnectionCreatedAt]
  updatedAt: [ItemConnectionUpdatedAt]
  name: [ItemConnectionName]
  description: [ItemConnectionDescription]
  image: [ItemConnectionImage]
  section: [ItemConnectionSection]
  price: [ItemConnectionPrice]
}

input ItemInput {
  name: String
  description: String
  image: ID
  section: ID
  price: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Item | createItemPayload | updateItemPayload | deleteItemPayload | ItemConnection | ItemAggregator | ItemAggregatorSum | ItemAggregatorAvg | ItemAggregatorMin | ItemAggregatorMax | ItemGroupBy | ItemConnection_id | ItemConnectionCreatedAt | ItemConnectionUpdatedAt | ItemConnectionName | ItemConnectionDescription | ItemConnectionImage | ItemConnectionSection | ItemConnectionPrice | Order | createOrderPayload | updateOrderPayload | deleteOrderPayload | OrderConnection | OrderAggregator | OrderAggregatorSum | OrderAggregatorAvg | OrderAggregatorMin | OrderAggregatorMax | OrderGroupBy | OrderConnection_id | OrderConnectionCreatedAt | OrderConnectionUpdatedAt | OrderConnectionAddress | OrderConnectionPostalCode | OrderConnectionCity | OrderConnectionItems | OrderConnectionAmount | Section | createSectionPayload | updateSectionPayload | deleteSectionPayload | SectionConnection | SectionAggregator | SectionGroupBy | SectionConnection_id | SectionConnectionCreatedAt | SectionConnectionUpdatedAt | SectionConnectionName | SectionConnectionDescription | SectionConnectionImage | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createItem(input: createItemInput): createItemPayload
  updateItem(input: updateItemInput): updateItemPayload
  deleteItem(input: deleteItemInput): deleteItemPayload
  createOrder(input: createOrderInput): createOrderPayload
  updateOrder(input: updateOrderInput): updateOrderPayload
  deleteOrder(input: deleteOrderInput): deleteOrderPayload
  createSection(input: createSectionInput): createSectionPayload
  updateSection(input: updateSectionInput): updateSectionPayload
  deleteSection(input: deleteSectionInput): deleteSectionPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Order {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: String
  postalCode: String
  city: String
  items: JSON
  amount: Int
}

type OrderAggregator {
  count: Int
  sum: OrderAggregatorSum
  avg: OrderAggregatorAvg
  min: OrderAggregatorMin
  max: OrderAggregatorMax
}

type OrderAggregatorAvg {
  amount: Float
}

type OrderAggregatorMax {
  amount: Float
}

type OrderAggregatorMin {
  amount: Float
}

type OrderAggregatorSum {
  amount: Float
}

type OrderConnection {
  values: [Order]
  groupBy: OrderGroupBy
  aggregate: OrderAggregator
}

type OrderConnection_id {
  key: ID
  connection: OrderConnection
}

type OrderConnectionAddress {
  key: String
  connection: OrderConnection
}

type OrderConnectionAmount {
  key: Int
  connection: OrderConnection
}

type OrderConnectionCity {
  key: String
  connection: OrderConnection
}

type OrderConnectionCreatedAt {
  key: DateTime
  connection: OrderConnection
}

type OrderConnectionItems {
  key: JSON
  connection: OrderConnection
}

type OrderConnectionPostalCode {
  key: String
  connection: OrderConnection
}

type OrderConnectionUpdatedAt {
  key: DateTime
  connection: OrderConnection
}

type OrderGroupBy {
  _id: [OrderConnection_id]
  createdAt: [OrderConnectionCreatedAt]
  updatedAt: [OrderConnectionUpdatedAt]
  address: [OrderConnectionAddress]
  postalCode: [OrderConnectionPostalCode]
  city: [OrderConnectionCity]
  items: [OrderConnectionItems]
  amount: [OrderConnectionAmount]
}

input OrderInput {
  address: String
  postalCode: String
  city: String
  items: JSON
  amount: Int
}

type Query {
  item(id: ID!): Item
  items(sort: String, limit: Int, start: Int, where: JSON): [Item]
  itemsConnection(sort: String, limit: Int, start: Int, where: JSON): ItemConnection
  order(id: ID!): Order
  orders(sort: String, limit: Int, start: Int, where: JSON): [Order]
  ordersConnection(sort: String, limit: Int, start: Int, where: JSON): OrderConnection
  section(id: ID!): Section
  sections(sort: String, limit: Int, start: Int, where: JSON): [Section]
  sectionsConnection(sort: String, limit: Int, start: Int, where: JSON): SectionConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Section {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  image: UploadFile
  items(sort: String, limit: Int, start: Int, where: JSON): [Item]
}

type SectionAggregator {
  count: Int
}

type SectionConnection {
  values: [Section]
  groupBy: SectionGroupBy
  aggregate: SectionAggregator
}

type SectionConnection_id {
  key: ID
  connection: SectionConnection
}

type SectionConnectionCreatedAt {
  key: DateTime
  connection: SectionConnection
}

type SectionConnectionDescription {
  key: String
  connection: SectionConnection
}

type SectionConnectionImage {
  key: ID
  connection: SectionConnection
}

type SectionConnectionName {
  key: String
  connection: SectionConnection
}

type SectionConnectionUpdatedAt {
  key: DateTime
  connection: SectionConnection
}

type SectionGroupBy {
  _id: [SectionConnection_id]
  createdAt: [SectionConnectionCreatedAt]
  updatedAt: [SectionConnectionUpdatedAt]
  name: [SectionConnectionName]
  description: [SectionConnectionDescription]
  image: [SectionConnectionImage]
}

input SectionInput {
  name: String
  description: String
  image: ID
  items: [ID]
}

input updateItemInput {
  where: InputID
  data: ItemInput
}

type updateItemPayload {
  item: Item
}

input updateOrderInput {
  where: InputID
  data: OrderInput
}

type updateOrderPayload {
  order: Order
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSectionInput {
  where: InputID
  data: SectionInput
}

type updateSectionPayload {
  section: Section
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""
The `Upload` scalar type represents a file upload promise that resolves an
object containing `stream`, `filename`, `mimetype` and `encoding`.
"""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
